name: Render Delta Coverage Report

inputs:
  title:
    description: 'Title in PR comment.'
    default: 'ðŸ“ˆ Î”elta Coverage Check'
    required: false

  summary-report-base-path:
    description: 'Base path for all summary reports.'
    required: true
    default: 'build/reports/coverage-reports/'

  suppress-check-failures:
    description: 'Suppress failures.'
    required: false
    default: ${{ contains(github.event.pull_request.labels.*.name, 'suppress-delta-coverage') }}

  github-token:
    description: 'GitHub token.'
    required: false
    default: ${{ github.token }}

runs:
  using: "composite"

  steps:

    - name: Build All Summaries
      id: all-summaries
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const files = fs.readdirSync(`${{ inputs.summary-report-base-path }}`);
          const summaryFiles = files.filter(file => file.includes('-summary.json'));
          const summaries = summaryFiles.map(file => 
            JSON.parse(fs.readFileSync(`build/reports/coverage-reports/${file}`, 'utf8'))
          );
          const allSummaries = JSON.stringify(summaries);
          const allSummariesFile = 'all-summaries.json';
          fs.writeFileSync(allSummariesFile, allSummaries);
          core.setOutput('file', allSummariesFile);

    - name: Create Comment Marker
      id: comment-marker
      if: ${{ inputs.title != '' }}
      shell: bash
      run: echo 'result=${{ format('<!-- marker={0} -->', inputs.title) }}' >> $GITHUB_OUTPUT

    - name: Find Existing Comment In PR
      id: find-comment
      if: ${{ steps.comment-marker.outputs.result && github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const response = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          })
          const comment = response.data.find(it => 
            it.body.includes('${{ steps.comment-marker.outputs.result }}')
          )
          if (comment) {
            console.log(`Comment found: ${comment.id}`);
            return comment.id
          }

    - id: build-message
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const createCommentMsg = require('${{ github.action_path }}/.github/actions/delta-action/actions/build-comment-body.js');
          return createCommentMsg({
            checkRunsContent: `${{ steps.create-check-runs.outputs.check-runs }}`,
            commentTitle: '${{ inputs.title }}',
            commentMarker: `${{ steps.comment-marker.outputs.result }}`,
            core: core
          });

    - name: Update or Create Comment
      uses: actions/github-script@v7
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          if ('${{ steps.find-comment.outputs.result }}') {
            github.rest.issues.updateComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: '${{ steps.find-comment.outputs.result }}',
              body: ${{ steps.build-message.outputs.result }}
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ${{ steps.build-message.outputs.result }}
            })
          }