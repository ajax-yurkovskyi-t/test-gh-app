name: Update check run
description: Update check run action

inputs:
  check-run-ids:
    description: 'Array of Check Run IDs'
    required: false

  check-run-name:
    description: 'Name of the check run'
    required: false

  conclusion:
    description: 'Conclusion of the check run'
    required: true

  title:
    description: 'Title of the check run body'
    required: false

  summary:
    description: 'Summary of the check run body'
    required: false

  text:
    description: 'Text of the check run body'
    required: false

  head-sha:
    description: 'The SHA of the pull request head.'
    default: ${{ github.event.pull_request.head.sha }}
    required: false

  target-repo:
    description: 'Target Repository name'
    default: ${{ github.repository }}
    required: false

  target-pr-number:
    description: 'Target Pull Request number'
    required: false

  github-token:
    description: 'GitHub API Access Token.'
    default: ${{ secrets.PAT_TOKEN }}
    required: false

runs:
  using: "composite"
  steps:
    - name: Generate a token
      id: generate-app-token
      continue-on-error: true
      uses: actions/create-github-app-token@v1.9.3
      with:
        app-id: ${{ secrets.GH_APP_ID }}
        private-key: ${{ secrets.JAVA_BACKEND_APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}

    - name: Get Target SHA
      id: get-target-sha
      if: ${{ inputs.check-run-name }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ steps.generate-app-token.outputs.token }}
        script: |
          const targetPrNumber = "${{ inputs.target-pr-number }}";
          const targetRepo = "${{ inputs.target-repo }}";

          const [owner, repo] = targetRepo.split('/');
          let sha = "${{ inputs.head-sha || github.sha }}";

          if (targetPrNumber) {
            const prNumber = parseInt(targetPrNumber, 10);
            if (isNaN(prNumber)) {
             throw new Error(`Invalid PR number: ${targetPrNumber}`);
            }
          
            const pr = await github.rest.pulls.get({
              owner: owner,
              repo: repo,
              pull_number: prNumber
            });
          
            sha = pr.data.head.sha;
          }
          console.log(`Target SHA: ${sha}`);
          return sha;

    - name: List Check Runs For Commit Sha
      id: list-check-runs
      if: ${{ steps.get-target-sha.outputs.result }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ steps.generate-app-token.outputs.token }}
        script: |
          const targetRepo = "${{ inputs.target-repo }}";
          const [owner, repo] = targetRepo.split('/');
          const checkRunsResponse = await github.rest.checks.listForRef({ 
            owner: owner, 
            repo: repo, 
            ref: ${{ steps.get-target-sha.outputs.result }}
          });
          
          return checkRunsResponse.data.check_runs;

    - name: Find Check Run By Name
      id: find-check-run
      if: ${{ steps.list-check-runs.outputs.result }}
      uses: actions/github-script@v7
      with:
        script: |
          const checkRuns = ${{ steps.list-check-runs.outputs.result }}
          const checkRunName = "${{ inputs.check-run-name }}"
          const checkRun = checkRuns.find(
            (checkRun) => checkRun.name === 'ðŸ“ˆTest Coverage'     
          );
          return checkRun.id;


    - name: Update Check Run
      id: update-check-run
      uses: actions/github-script@v7
      with:
        github-token: ${{ steps.generate-app-token.outputs.token }}
        script: |
          const [owner, repo] = "${{ inputs.target-repo }}".split('/');
          let checkRunIds = "${{ inputs.check-run-ids }}";
          checkRunIds = checkRunIds ? checkRunIds.split(',') : [${{ steps.find-check-run.outputs.result }}];
          let i = 1
          for (const checkRunId of checkRunIds) {                                                                  
            const checkRunData = {
              owner: owner,
              repo: repo,
              check_run_id: checkRunId,
              name: `${{ inputs.check-run-name || 'Some name' }}-${i++}`,
              status: 'completed',
              conclusion: "${{ inputs.conclusion }}"
            };
          
            const checkRunTitle = "${{ inputs.title }}"
            const checkRunSummary = "${{ inputs.summary }}"
            const checkRunText = "${{ inputs.text }}"
          
            if (checkRunTitle && checkRunSummary) {
              checkRunData.output = {
                title: checkRunTitle,
                summary: checkRunSummary
              };
          
              if (checkRunText) {
                checkRunData.output.text = checkRunText;
              }
            }
          
            const checkRun = await github.rest.checks.update(checkRunData);
          }
